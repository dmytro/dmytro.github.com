<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dmytro Kovalov: Personal projects, blog, tips and tricks, UNIX development, administration and devops.</title>
    <link>http://dmytro.github.com/</link>
    <atom:link href="http://dmytro.github.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>Ruby, Perl, Javascript development, UNIX system administration and monitoring. Open source projects developed for my satisfaction and for fun, most of these available either on Github or CPAN. For closed source software provided short description, and probably a couple of screen-shots. Please feel free to use, to re-distribute, to critic and to contribute.
</description>
    <language>en-us</language>
    <pubDate>Mon, 28 Apr 2014 11:59:48 +0900</pubDate>
    <lastBuildDate>Mon, 28 Apr 2014 11:59:48 +0900</lastBuildDate>

    
    <item>
      <title>Витоки української Вікіпедії</title>
      <link>http://dmytro.github.com//2014/01/31/vytoky_ukrayinskoyi_wikipediyi.html</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0900</pubDate>
      <author>dmytro.kovalov@gmail.com (Dmytro Kovalov)</author>
      <guid>http://dmytro.github.com//2014/01/31/vytoky_ukrayinskoyi_wikipediyi</guid>
      <description>&lt;p&gt;&lt;em&gt;Ця історія почалася десь з пів-року, чи трохи більше тому. В якомусь форумі, чи то на Фейсбуку, чи ще десь згадали, що перша стаття українського розділу Вікіпедії була написана з Японії. На що я відповів, що я навіть знаю, хто це був.&lt;/p&gt;

&lt;p&gt;Сьогодні, 30 січня 2014 року, виповнються 10 років українському розділу Вікіпедії. Кілька особистих спогадів про те, як це було. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Два перших автори української Вікіпедії на той час навчалися в школі, один в старшій, інший в середній. Зараз вже обидва скінчили університет, один з них повернувся після університату до Японії, працює програмістом. Інший тільки-тільки пару тижнів тому здав випускні іспити і займається пошуками роботи або стажування.&lt;/p&gt;

&lt;p&gt;Для початку ось спогади першого автора Вікіпедії:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Наскільки я пам&#39;ятаю , я регулярно використовув вікіпедію ще в старшій школі для пошуків інформації з економіки та філософії, але це було все англійською мовою. Я вдячний, що на протязі всіх цих років Вікіпедія зберегла мені час та дала можливість отримати знання.&lt;/p&gt;

&lt;p&gt;У мене з’явився інтерес до україномовної Вікі, коли я хотів перекласти англійське слово українською. Я знав, що існує тільки кілька ресурсів для перекладу. Коли я спробував використати функцію перегляду іншою мовою на Вікіпедії, побачив, що українська сторінка була створена, але не існувало жодної статті . Я не впевнений, як довго вони були у такому стані, але пам&#39;ятаю, що інші сайти іноземних мов існували, і Вікімедіа тільки починали вносити системи інших мов. Я сказав про це своєму молодшому братові Івану, ми обоє зацікавилися і почати вносити статті в систему. При цьому першим словом було &quot;Атом&quot;, бо воно одне із перших слів в словниках. За ланцюжком ми почали вводити інші слова, пов&#39;язані з уже введеними статтями.&lt;/p&gt;

&lt;p&gt;Пізніше я зацікавився доповненням англійських сторінок про Україну. Мене завжди турбувало, що назва міста мого народження писалася у відповідності до російської фонетики, а не так, як вимовляєтьс українською. (Чому досі пишуть “Кієв”, а не “Київ” ?)&lt;/p&gt;

&lt;p&gt;Аналогічні проблеми існували і в україномовній Вікіпедії. Мене турбувало написання назв декількох японських місць, які також пішли від російської фонетики, не з японської вимови і не враховуючи особливості української фонетики. Наприклад, назва відомої гори російською звучить як &quot;Фудзі&quot;, але &quot;Фуджі&quot; є ближчим до справжньої японської вимови. На мою думку японські підручники українською мовою були перекладені халатно прямо з російської, і, на жаль, вони стали офіційним матеріалом для цитування.&lt;/p&gt;

&lt;p&gt;Проживаючи у Токіо з раннього дитинства понад 20 років, я знаю, що це — не справжня японська вимова, але я не зміг довести цього у Вікіпедії, тому що я не маю друкованих публікацій з цієї тематики.&lt;/p&gt;

&lt;p&gt;Саме через це моє незадоволення “справжньою наукою&quot;, я вирішив працювати над покращенням своєї репутації, щоб мати можливість виправлення таких помилок, тож попросив рахунок адміністратора.&lt;/p&gt;

&lt;p&gt;На жаль, усе сповільнилося, коли у мене почалися IB іспити у школі та інша академічна діяльність, яка забрала багато часу. Я робив кілька невеликих внесків, але нічого суттєвого. Але сподіваюся, що саме публікація початкових статей дала поштовх хвилі нових доповнень.
&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Що стосується Вікіпедії, як зараз пригадується мені (все-таки десять років пройшло), на той час коли це відбувалося, Вікіпедія вже була досить розвиненою, але ще не була такою всеохоплюючою. Чесно кажучи, не пригадується, в якому стані були іншомовні (не англійською) розділи. Через те, може, в голову навіть не приходила думка, що українська вікіпедія може бути тим, чим вона є сьогодні.&lt;/p&gt;

&lt;p&gt;Тим більше я радий, що Юрі (першому автору) прийшла думка, що Вікіпедію треба трохи «підштовхнути». З цього все і почалося.&lt;/p&gt;

&lt;p&gt;Як підштовхнути? Просто почати писати статті. І вони вдвох з Іваном почали це робити. Технологія виглядала досить просто - беремо тлумачний словник, відкриваємо на першій сторінці, починаємо друкувати.&lt;/p&gt;

&lt;p&gt;Це вже потім розумні люди розкопали історію: де, як, з якого IP’шника, під яким псевдо заносилися записи.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Стосовно минулого (хроніки звитяг):&lt;/p&gt;

&lt;p&gt;Спробую Вам допомогти:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;30 січня 204 р. (чи пригадуєте, що дало поштовх?)  Ви &lt;a href=&quot;https://uk.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B5%D1%86%D1%96%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0:%D0%92%D0%BD%D0%B5%D1%81%D0%BE%D0%BA/61.125.212.32&quot;&gt;почали редагувати україномовну Вікіпедію спочатку як незареєстрований користувач і започаткували 2 статті (Атом та Мільярд)&lt;/a&gt; (поступово опанувавши вікіфікацію, відповідно зустрілися з проблемою &quot;червоних ланок&quot; і почали її вирішувати з визначення саме мільярда).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…практично паралельно &lt;a href=&quot;https://en.wikipedia.org/wiki/Special:Contributions/61.125.212.32&quot;&gt;експериментували в англомовній ВП з контентом статей іншої тематики&lt;/a&gt; (отримавши перший досвід &quot;війни редагувань&quot; щодо однієї з найгарячіших &quot;дилем&quot; Kiev&amp;lt;&gt;Kyiv);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Трохи згодом Юра з Іваном підключили і батька. Тепер вже я також можу згадати і подивитися, яким був &lt;a href=&quot;https://uk.wikipedia.org/w/index.php?title=AWK&amp;amp;oldid=686&quot;&gt;мій перший внесок&lt;/a&gt; і для порівняння подивитися на &lt;a href=&quot;https://uk.wikipedia.org/w/index.php?title=AWK&quot;&gt;сучасний стан цієї ж статті&lt;/a&gt; для того, щоб впевнитися, що теорія «поштовху» спрацювала.&lt;/p&gt;

&lt;p&gt;Тож, знайомтеся. Перші два автори українського розділу Вікіпедії: &lt;strong&gt;Юрій та Іван Ковальови&lt;/strong&gt;. Родом з Києва, місце проживання - Токіо, Японія. Українці.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Додатково:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/aK9qXF&quot;&gt;Історія Української Вікіпедії&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Перші внески

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/WYTdmA&quot;&gt;тут&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/a4M6zZ&quot;&gt;і тут&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>Is MacOSX 10.9 == MacOS 9.x?</title>
      <link>http://dmytro.github.com//2013/12/20/is_macosx_10.9_macos_9.x..html</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0900</pubDate>
      <author>dmytro.kovalov@gmail.com (Dmytro Kovalov)</author>
      <guid>http://dmytro.github.com//2013/12/20/is_macosx_10.9_macos_9.x.</guid>
      <description>&lt;p&gt;&lt;em&gt;My Mac is crashing... Again, after 10+ years of stability.
. I am mac user since MacOS 7.1. 7.x never crashed on  me, 8.x was kind of OK, 9.x sucked.
.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now after upgrading to Maverick I am rebooting more or less regularly to fix some of the problems. I never had any problems on any of the Macs with audio or with camera (on Macs with cameras). Currently I have already rebooted several times to fix missing sound, and my camera in Skype still does not work.&lt;/p&gt;

&lt;p&gt;As a UNIX SA I know for sure that nobody needs to reboot UNIX based computer for any reason but kernel upgrade. Not if you are Mac user anymore...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/end_of_grunt&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Same sad story with iOS 7. It sucks seriously. Because of permanent crashing and all other bugs. This is the worst iOS version I&#39;ve used.&lt;/p&gt;

&lt;p&gt;Apple problems started last time when Steve Jobs was kicked out of Apple. Then he was back, Mac was back. Now, sadly, there&#39;s no way to get him again. Does it mean Apple is going down forever? Hope not so.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Chef roles from Capistrano</title>
      <link>http://dmytro.github.com//2013/12/04/running_chef_roles_from_capistrano.html</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0900</pubDate>
      <author>dmytro.kovalov@gmail.com (Dmytro Kovalov)</author>
      <guid>http://dmytro.github.com//2013/12/04/running_chef_roles_from_capistrano</guid>
      <description>&lt;p&gt;&lt;em&gt;Chef databags are used to pass information between sessions of Capistrano and Chef.
 Databags are generated on Capistrano side and then used by Chef for server and components configuration.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my new project &lt;a href=&quot;/2013/11/01/chef_and_capistrano_integration.html&quot;&gt;&lt;em&gt;und Capiche&lt;/em&gt;&lt;/a&gt; I use tandem of Capistrano (or &lt;em&gt;cap&lt;/em&gt;) and Chef-solo (&lt;em&gt;chef&lt;/em&gt;) to deploy stacks of applications. Stacks are collections of server configuration, software packages required to run application, software configuration, and application code itself.&lt;/p&gt;

&lt;h1&gt;Capistrano + Chef&lt;/h1&gt;

&lt;p&gt;Here&#39;s a brief flow of typical deployment process in this schema:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;locally capistrano creates configuration to be used in Chef;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cap&lt;/em&gt; copies Chef-solo and configuration to all remote hosts;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cap&lt;/em&gt; starts chef-solo on remote hosts;&lt;/li&gt;
&lt;li&gt;after &lt;em&gt;chef&lt;/em&gt; finished, &lt;em&gt;cap&lt;/em&gt; starts standard application deployment.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Databag messenger&lt;/h2&gt;

&lt;p&gt;There are significant differences in how &lt;em&gt;cap&lt;/em&gt; and &lt;em&gt;chef&lt;/em&gt; executed. First and main difference is that they are invoked on different servers. &lt;em&gt;Cap&lt;/em&gt; starts deployment from local server, but &lt;em&gt;chef&lt;/em&gt; processes (possibly many of them) run on remote servers in parallel.&lt;/p&gt;

&lt;p&gt;There are no standard ways (like calling method and passing arguments) for information exchange between &lt;em&gt;cap&lt;/em&gt; and &lt;em&gt;chef&lt;/em&gt;. I use &lt;em&gt;chef databags&lt;/em&gt; as information medium between &lt;em&gt;cap&lt;/em&gt; and &lt;em&gt;chef&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Capistrano needs an ability to generate databags from its own configuration in the format that &lt;em&gt;chef&lt;/em&gt; cookbooks understand; also capistrano should be able to read and search &lt;em&gt;chef&lt;/em&gt; databags.&lt;/p&gt;

&lt;h3&gt;Hosts (AKA nodes) databag&lt;/h3&gt;

&lt;p&gt;First and very important task, is to be able to pass server configuration -- including roles -- from local Capistrano process to the remote nodes, where &lt;em&gt;chef&lt;/em&gt; can use it. Example below shows how this could be implemented.&lt;/p&gt;

&lt;p&gt;Suppose you have hosts configuration like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.10&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.11&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;web01&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.12&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;web02&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.13&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:security&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:monitoring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this configuration Capistrano recipe creates databag called &lt;code&gt;:node&lt;/code&gt; with one item for each capistrano host. Example of a recipe:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:roles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;find_servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\./&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;role_names_for_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;fqdn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;ss&quot;&gt;ipaddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generated databag for one of the host looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;10_0_1_11&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dns&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;security&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;monitoring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;fqdn&amp;quot;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.1.11&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;ipdaress&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.1.11&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;options&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&amp;quot;no_release&amp;quot;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This databag can be used directly with &lt;em&gt;chef&lt;/em&gt; recipes, using &lt;code&gt;data_bag_item&lt;/code&gt; or &lt;code&gt;search&lt;/code&gt; methods as for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;monitoring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;roles:*monitoring*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is one trick though. Recipe needs to be written in such a way as to support search in &lt;em&gt;Chef-solo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;By default &lt;em&gt;Chef-solo&lt;/em&gt; is only able to use data bags for &lt;code&gt;data_bag&lt;/code&gt; and &lt;code&gt;data_bag_item&lt;/code&gt; operations; to use search with solo you need to use extension &lt;a href=&quot;TODO&quot;&gt;chef-solo-search&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt;: In some cases this is not enough, however: if cookbook designed in such a way that search is explicitly prohibited in solo mode, some changes to the cookbook are necessary. Below is an example of the modifications I had to do for &lt;em&gt;Munin&lt;/em&gt; cookbook to make it work with both &lt;em&gt;Chef-solo&lt;/em&gt; and search.&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Original cookbook recipe&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:solo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sysadmins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_bag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_bag_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Change to&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cant_search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:solo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/chef-solo-search/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cant_search&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sysadmins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_bag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_bag_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Applying Chef roles&lt;/h2&gt;

&lt;p&gt;There are two sides to actual executing a Chef cookbook via capistrano: &lt;em&gt;cap&lt;/em&gt; side and &lt;em&gt;chef&lt;/em&gt;. On every server we need to execute command that applies configuration specific to that server. We could do this sequentially, by using &lt;code&gt;:hosts&lt;/code&gt; option to &lt;code&gt;run&lt;/code&gt; method, but this will be really slow.&lt;/p&gt;

&lt;p&gt;Instead of this, I am using a bit of Capistrano magic and small Ruby script on remote server(s) side.&lt;/p&gt;

&lt;h3&gt;Capistrano task&lt;/h3&gt;

&lt;p&gt;Following task starts parallel run of remote script &lt;code&gt;run_roles.rb&lt;/code&gt; on all servers with option that contains server name from &lt;em&gt;cap&lt;/em&gt; configuration. This &lt;code&gt;$CAPISTRANO:HOST$&lt;/code&gt; variable is special Capistrano magic, it is internally converted by Capistrano to &lt;code&gt;server.host&lt;/code&gt; (Note: It is &lt;em&gt;not&lt;/em&gt; shell variable, it is set by Capistrano &lt;em&gt;before&lt;/em&gt; shell runs).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:roles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%Q{ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;try_sudo&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef_solo_remote&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/run_roles.rb  $CAPISTRANO:HOST$ }&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On remote (i.e. &lt;em&gt;chef&lt;/em&gt; side) there&#39;s a small script, that takes &lt;code&gt;server.host&lt;/code&gt; as an argument and applies roles from &lt;code&gt;node&lt;/code&gt; databag.&lt;/p&gt;

&lt;p&gt;What happens here is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;script reads databag with current server configuration;&lt;/li&gt;
&lt;li&gt;it reads all roles files (&lt;code&gt;role.json&lt;/code&gt;) that are listed in the databag;&lt;/li&gt;
&lt;li&gt;combines them into single &lt;code&gt;run_list&lt;/code&gt;; and&lt;/li&gt;
&lt;li&gt;runs &lt;em&gt;chef-solo&lt;/em&gt; using combined run list.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:solo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data_bag_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/data_bags&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\./&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_host&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:DataBagItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run_lists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_lists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_host&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cd &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; chef-solo --config solo.rb --json-attributes &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_host&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.json&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;PTY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:EIO&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;PTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ChildExited&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The child process exited!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Next steps&lt;/h1&gt;

&lt;p&gt;To be able to deploy full stacks of applications additionally to basic hosts information Capistrano needs to share all its configuration with Chef. In next installments I will describe how this can be achieved.&lt;/p&gt;

&lt;!--  LocalWords:  und Capiche sysadmins sudo config PTY stdin pid
 --&gt;

</description>
    </item>
    
    <item>
      <title>und Capiche</title>
      <link>http://dmytro.github.com//2013/11/01/chef_and_capistrano_integration.html</link>
      <pubDate>Fri, 01 Nov 2013 00:00:00 +0900</pubDate>
      <author>dmytro.kovalov@gmail.com (Dmytro Kovalov)</author>
      <guid>http://dmytro.github.com//2013/11/01/chef_and_capistrano_integration</guid>
      <description>&lt;h1&gt;What is it?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Capistrano is primarily used as web application deployment framework. It is excellent combination of remote parallel execution of SSH commands with work-flow management. Chef, on the other side, is designed as configuration management tool and mostly used to configure infrastructure.
 Is it possible to combine powers of Capistrano and Chef for simpler and faster deployments, with simplified configuration? Can I deploy infra and application in a single step?
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&#39;ve made several attempts to combine powers of Chef and Capistrano: &lt;a href=&quot;https://github.com/dmytro/aws_deploy&quot;&gt;aws_deploy&lt;/a&gt;, &lt;a href=&quot;https://github.com/dmytro/chef-solo&quot;&gt;chef-solo&lt;/a&gt;, &lt;a href=&quot;https://github.com/dmytro/capistrano-recipes&quot;&gt;capistrano-recipes&lt;/a&gt;. This is a start for the new project.&lt;/p&gt;

&lt;h1&gt;Application Centric Architectures&lt;/h1&gt;

&lt;p&gt;In the old days deploying a server took longer. Rack it: optimistically - one day (if you&#39;re lucky, you could reuse somebody else&#39;s retired box); you (or your SA&#39;s) install OS on it - another day (with all the approvals and manual configs). In extreme cases (not a joke!) deploying a server took me 5 to 6 months.&lt;/p&gt;

&lt;p&gt;Application design was largely influenced or dictated by infrastructure architecture. Not only because of the price of the hardware, but also because of the difficulties with the deployment, multiple applications were sharing single server: &lt;em&gt;&quot;Our existing DB server has a lot of RAM and disks, we will put every possible database on it. When we run out, we will add disks and memory or migrate box to larger hardware or we build a cluster.&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These days architecture of the infrastructure is rather influenced by the application environment. Each application can have distinct architecture, different from any other application or even dynamically changing architecture, depending on the needs. Since deploy of a new server can take less than a minute, they are created when required, and there is no need to share.&lt;/p&gt;

&lt;h2&gt;Management&lt;/h2&gt;

&lt;p&gt;Dynamics of the environment makes administration of the architecture easier and more difficult at the same time.&lt;/p&gt;

&lt;p&gt;Easier, because of the one function per server approach. We can decommission (or upgrade) server and be sure that it did not serve any additional tasks that we are not aware of. For exactly the same reason shorter life-time of the server(s) is better.&lt;/p&gt;

&lt;p&gt;On the other side, management is a bit more difficult, because of higher number of servers that you need to manage. But this is where devops tools can really help.&lt;/p&gt;

&lt;h1&gt;What is my goal for this project?&lt;/h1&gt;

&lt;p&gt;I want to build servers from scratch. If not from bare metal, then at least from &#39;bare OS installation&#39;. Not just servers, but &#39;architectures&#39; - tailored for applications. Servers organized into logical groups, with application functioning at the end of single step deployment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have a list of hosts or IP&#39;s;&lt;/li&gt;
&lt;li&gt;an SSH key(s);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sudo&lt;/code&gt; or &lt;code&gt;su&lt;/code&gt; access;&lt;/li&gt;
&lt;li&gt;define server role(s), like &lt;code&gt;:app&lt;/code&gt; (Note: I am following Ruby and Capistrano conventions here), &lt;code&gt;:monitoring&lt;/code&gt;, &lt;code&gt;:logger&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;run deployment;&lt;/li&gt;
&lt;li&gt;have running application on newly deployed server(s) is XX minutes;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;I want to avoid:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This should be easy to configure for end user, avoid writing extensive configuration for each new application or &lt;em&gt;&#39;architecture&#39;&lt;/em&gt;: just hostnames and roles.&lt;/li&gt;
&lt;li&gt;Additionally, I want to be independent from any specifics of cloud or non-cloud provider.&lt;/li&gt;
&lt;li&gt;Similarly, I wish avoid building custom configuration and deployment management infrastructure (such as Chef or Puppet servers). My idea is to bring my laptop to you, plug it in (or let you git clone configuration repository), and by running single command have &lt;em&gt;your&lt;/em&gt; application deployed in minutes (or, let&#39;s say dozens of minutes).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Yes, there are drawbacks. Configuring lists of hostnames or IP addresses in files is not scalable in the long run -- for large-scale applications or for multiple applications, for hundreds of hosts. One step at a time...&lt;/p&gt;

&lt;h2&gt;Chef and Capistrano&lt;/h2&gt;

&lt;p&gt;I had made several approaches trying to make Cap and Chef work together.&lt;/p&gt;

&lt;p&gt;First attempt was a project called &lt;a href=&quot;...&quot;&gt;aws_deploy&lt;/a&gt;. Simply speaking it is a Ruby wrapper around AWS API, Chef-solo and Capistrano. Goal of the project was to have a single step deployment of application server in EC2 environment. AWS deploy is able to spawn new AWS instance if it does not exist, bootstrap it and install required git branch of RoR application.&lt;/p&gt;

&lt;p&gt;Although this project simplified deployment process a bit, shortcomings of the AWS Deploy design are obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Deploy is able to deploy only single instance at a time;&lt;/li&gt;
&lt;li&gt;chef-solo is not really configurable and only delivers standard static configuration server prepared to run Ruby on Rails;&lt;/li&gt;
&lt;li&gt;there is no interaction between Capistrano and Chef, they simply executed one after another by script wrapper.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Cap + Chef = Capiche&lt;/h1&gt;

&lt;p&gt;Capistrano recipes often have some kind of installation task. Before deploying a configuration, you have to install the package. Such recipes are usually similar to the example below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nginx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apt-get install -y nginx&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s an obvious problem with the recipe: it is not portable. This will work only on Debian or Ubuntu, and even on these systems there cases when this is not enough: what if I want different version of Nginx, or if I want to compile it from source with some custom configuration.&lt;/p&gt;

&lt;p&gt;At the same time Chef is designed to handle such situations, and have all necessary DSL for it.&lt;/p&gt;

&lt;p&gt;Is it possible to change Capistrano recipe like one above and make it use Chef cookbook instead?&lt;/p&gt;

&lt;p&gt;This is exactly what I am trying to achieve with the new project I am calling &lt;strong&gt;Unified Deployment with Capistrano and Chef&lt;/strong&gt; or &lt;em&gt;&#39;und Capiche&#39;&lt;/em&gt; (AKA &lt;em&gt;Capiche&lt;/em&gt;) for short.&lt;/p&gt;

&lt;p&gt;The new project is not really new, it&#39;s rather a combination of the efforts from previous similar projects. Some things is already implemented and working, as I write this. But functionality and code are spread across multiple repositories and it&#39;s not easy even for myself to join pieces together to design deployment for new project.&lt;/p&gt;

&lt;h2&gt;Components&lt;/h2&gt;

&lt;p&gt;Current &lt;em&gt;Capiche&lt;/em&gt; setup is based on RVM, Capistrano &lt;code&gt;2.x&lt;/code&gt;, Chef-solo and Capistrano &lt;a href=&quot;https://github.com/railsware/capistrano-multiconfig&quot;&gt;multi-configuration extension&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Current state&lt;/h2&gt;

&lt;p&gt;Below is an example of how configuration file for an application. This is actual working setup.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.10&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.11&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;web01&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.12&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;web02&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;10.0.1.13&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:security&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:monitoring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:app&lt;/code&gt;, &lt;code&gt;:web&lt;/code&gt; and &lt;code&gt;:db&lt;/code&gt; are standard Capistrano roles for Rails application,&lt;/li&gt;
&lt;li&gt;additional roles present here are &lt;code&gt;:admin&lt;/code&gt;, &lt;code&gt;:logger&lt;/code&gt;, &lt;code&gt;:security&lt;/code&gt;, and &lt;code&gt;:monitoring&lt;/code&gt; - new roles can be defined as necessary.&lt;/li&gt;
&lt;li&gt;Similarly &lt;code&gt;:primary&lt;/code&gt; and &lt;code&gt;:no_release&lt;/code&gt; are standard Capistrano host options, but&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:hostname&lt;/code&gt; is custom option used to set target host hostname and DNS.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Capistrano roles one-to-one correspond to roles on Chef side. This allows skip additional configuration.&lt;/p&gt;

&lt;p&gt;Each Chef JSON role is simply a pointer to a more details role Ruby file. JSON roles look similar to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app.json&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;role[rails_common]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[common]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// logger.json&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;role[logger]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mysql.json&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;role[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[common]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// web.json&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;role[web]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[common]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example of Ruby role file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;common&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Components required on every node&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[user::databag]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[deep_security]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[rsyslog]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[chef-solo-search]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[yum::epel]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[yum::remi]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[monitoring_client]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[git]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;default_attributes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data_bag_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Scope&lt;/h2&gt;

&lt;p&gt;It is important to understand, that main target of this kind of setup is small to medium sort of applications -- tens of servers, rather than hundreds or thousands. But, at the same time, there are thousands of such applications, therefore ease of configuration and adaptability to the environment of next application is a key.&lt;/p&gt;

&lt;h2&gt;Project home&lt;/h2&gt;

&lt;p&gt;There is no code now in Github repo, as I write this, I only created new repo few minutes ago, but I am starting moving bits and pieces from other places. Watch &lt;a href=&quot;https://github.com/dmytro/und_capiche&quot;&gt;this space&lt;/a&gt;.&lt;/p&gt;

&lt;!--  LocalWords:  und Capiche SA Centric decommission devops SA&#39;s configs db admin mysql dns rsyslog repo
 --&gt;



</description>
    </item>
    
    <item>
      <title>Speeding up Jekyll site</title>
      <link>http://dmytro.github.com//2013/10/29/optimizing_jekyll.html</link>
      <pubDate>Tue, 29 Oct 2013 00:00:00 +0900</pubDate>
      <author>dmytro.kovalov@gmail.com (Dmytro Kovalov)</author>
      <guid>http://dmytro.github.com//2013/10/29/optimizing_jekyll</guid>
      <description>&lt;p&gt;&lt;em&gt;Recently I&#39;ve added some optimizations to my Jekyll setup for faster page loading.
 Google and other search engines consider page load speed when building their ratings. It means that improving load speed can boost your SEO rating too, not only your users happiness.
&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Understanding the problem&lt;/h1&gt;

&lt;p&gt;Most of the optimizations in my case was about shrinking CSS, Javascript and images, removing blank spaces from HTML and reducing number of HTTP request by joining assets into single asset file.&lt;/p&gt;

&lt;p&gt;But before doing optimization it is better to understand where do you stand and what do you want to optimize.&lt;/p&gt;

&lt;p&gt;Good page speed analyzer can be help with the task, I&#39;ve found decent one at &lt;a href=&quot;http://gtmetrix.com/&quot;&gt;http://gtmetrix.com/&lt;/a&gt;. There are others as well, for example &lt;a href=&quot;https://www.site24x7.com/web-page-analyzer.html&quot;&gt;https://www.site24x7.com/web-page-analyzer.html&lt;/a&gt;, Google has some too.&lt;/p&gt;

&lt;p&gt;GTMetrics analyzer is pretty good, it grades the page by relative standing of your page to average page stats on the net, and can grade importance of each metric and recommendations for speed improvements. is Whatever comes red on their report is probably worth your attention.&lt;/p&gt;

&lt;p&gt;In my case the most critical things where decreasing number of HTTP request for CSS and Javascript files and reducing size of the hosted images.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt;Assets pipeline&lt;/h1&gt;

&lt;h2&gt;Javascript and CSS handling&lt;/h2&gt;

&lt;p&gt;I was quite pleased to find for the assets handling &lt;code&gt;jekyll-assets&lt;/code&gt; gem that works with Jekyll out of the box, and it handles assets very similar to the way Rails does it, so less learning for me. There are other solutions as well, obviously I haven&#39;t tested all of them, but among tested ones this one is on of the better ones.&lt;/p&gt;

&lt;p&gt;Adding the gem to Jekyll setup is quite simple, just include lines into &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;_plugins/ext.rb&lt;/code&gt; accordingly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-assets&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-assets&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next step is a bit of reorganizing of how Javascript and CSS (or SASS) files are laid out in your working directory.&lt;/p&gt;

&lt;p&gt;In my setup JS and SASS files are in &lt;code&gt;./js/&lt;/code&gt; and &lt;code&gt;./sass/&lt;/code&gt; directories. Sass saves generated CSS&#39;s in &lt;code&gt;./css&lt;/code&gt;. For generating CSS files during local testing and when publishing I had sass command in my Rake task &amp;mdash; in more details this was described in &lt;a href=&quot;/2013/08/13/more_about_jekyll.html&quot;&gt;previous post&lt;/a&gt; &amp;mdash; but with introducing assets pipeline this became redundant.&lt;/p&gt;

&lt;p&gt;Examples of the new Rake tasks are given below.&lt;/p&gt;

&lt;h3&gt;Refactoring assets&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Jekyll-assets&lt;/code&gt; introduces new directory &lt;code&gt;_assets&lt;/code&gt; with subdirectories &lt;code&gt;stylesheets&lt;/code&gt; and &lt;code&gt;javascripts&lt;/code&gt;. I&#39;ve moved all my .js and .sass files to the new location and replaced all &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;script&lt;/code&gt; references from the code with just 2 lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% javascript app %}
{% stylesheet app %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Jekyll-assets&lt;/code&gt; uses similar to Rails assets declaration, so to include all of my JS and CSS, what I had to do is to create two new files &amp;mdash; one in each directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File &lt;code&gt;_assets/stylesheets/app.css&lt;/code&gt;

&lt;pre&gt;&lt;code&gt;  #= require cssnormalize-min
  #= require dmytro
  #= require pygments
  #= require fancybox
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;File &lt;code&gt;_assets/javascripts/app.js&lt;/code&gt;

&lt;pre&gt;&lt;code&gt;  #= require jquery
  #= require jquery.tagcloud
  #= require fancybox
  #= require tag_cloud
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Resulting parsed JS and CSS tags look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/assets/app-e4c2b9c81e41368c0fcc779280bd5530.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/assets/app-b80c4942bb62b4e63380a8693c39923c.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Optimizing images&lt;/h2&gt;

&lt;p&gt;Another important aspect of optimization is reducing file size of the images. There are two parts in it: reducing geometry of the (mainly) photos, and second is adding some optimization to reduce file of the image. Both JPEG&#39;s and PNG&#39;s can be reduced quite significantly.&lt;/p&gt;

&lt;h3&gt;Reduce geometry of JPEG files&lt;/h3&gt;

&lt;p&gt;First of all, files exported from iPhoto or such, can end up in a lot of various sizes. Sometimes you just forget to select proper reduction and have image files of impractical for the web sizes. ImageMagick can handle this quite easy, only needed is to add simple Rake task for it.&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resize&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%{mogrify -resize &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAX_GEOMETRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAX_GEOMETRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; &amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&amp;#39;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;no&quot;&gt;MAX_GEOMETRY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1280&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;960&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jpeg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
          &lt;span class=&quot;vi&quot;&gt;@jpgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;**/*.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;_site/**/*.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Scale down images to max geometry allowed&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
          &lt;span class=&quot;vi&quot;&gt;@jpgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;identify &amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/jpg\[\d+\]$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX_GEOMETRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX_GEOMETRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;h3&gt;Optimize JPEG&#39;s and PNG&#39;s&lt;/h3&gt;

&lt;p&gt;Additionally to geometry reduction significant size reduction can be gained by optimizing imgages: removing unnecessary Exif tags and comments from JPEG&#39;s or applying various deflating algorithms. For PNG&#39;s optimizations are lossless, but for JPEG&#39;s you can select to reduce image quality or do lossless optimization.&lt;/p&gt;

&lt;p&gt;Binaries for image optimizations are available for both MacOSX and Linux. On MacOSX &lt;code&gt;jpegoptim&lt;/code&gt; is available as part of Homebrew and is installed simply by &lt;code&gt;brew install jpegoptim&lt;/code&gt;. As for the PNG optimization &lt;code&gt;pngout&lt;/code&gt; binary is downladable from &lt;a href=&quot;http://www.jonof.id.au/kenutils&quot;&gt;Ken Silverman&#39;s Utilities page&lt;/a&gt;.&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Compress JPEG images&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:minimize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
      &lt;span class=&quot;vi&quot;&gt;@jpgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jpegoptim --strip-all --totals -o &amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:png&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omitted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Compress PNG images&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:minimize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;vi&quot;&gt;@pngs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./bin/pngout &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -q | true&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; : &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; bytes smaller &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;hr /&gt;

&lt;h1&gt;HTML compression&lt;/h1&gt;

&lt;p&gt;For further reduction of the web page(s) size stripping all excessive white spaces and html comments can help too. There&#39;s a Jekyll plug-in (more than one) for that too. I&#39;ve tried couple of them and stopped on &lt;code&gt;jekyll-minify-html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is also installable as gem. To start using in, just add &lt;code&gt;require &#39;jekyll-minify-html&#39;&lt;/code&gt; statement in &lt;code&gt;_plugins/ext.rb&lt;/code&gt; and &lt;code&gt;env: production&lt;/code&gt; in &lt;code&gt;_config.yml&lt;/code&gt;. That&#39;s it.&lt;/p&gt;

&lt;p&gt;However I find it quite heave and usually comment out when previewing page locally. That&#39;s brings another topic of Jekyll slowness, see below.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt;Rake tasks&lt;/h1&gt;

&lt;p&gt;Finally, these are new Rake tasks for publishing site to Github and for building it locally for preview.&lt;/p&gt;

&lt;h3&gt;Rake run&lt;/h3&gt;

&lt;p&gt;This task starts locally Jekyll for previewing site on the local machine.&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;compile and run the site locally&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll serve --watch --drafts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
 
  &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;INT&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;INT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;h3&gt;Rake publish&lt;/h3&gt;

&lt;p&gt;Build site and publish it to Github. In this task I also use &lt;code&gt;jpegoptim&lt;/code&gt; to optimize all thumb-nails from &lt;a href=&quot;https://github.com/redwallhp/JekyllGalleryTag&quot;&gt;Jekyll GalleryTag plugin&lt;/a&gt; which are generated automatically on page build (on line 6).&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;1
2
3
4
5
6
7
8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;compile and publish the site to Github&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:publish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;git checkout source&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%x{ git log -n 1 --no-merges --format=%s%b }&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll build&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jpegoptim --strip-all --totals -o _site/images/galleries/*-thumb*&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cd _site &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Publishing at $(date): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; git push origin master&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;hr /&gt;

&lt;h1&gt;Some stats ...&lt;/h1&gt;

&lt;p&gt;Just some stats about size reduction as result of these experiments. There numbers are far from being precise. During all these changes I kept adding posts and images to the site, so it&#39;s hard to tell exactly how much space each one have saved. I only can roll back my git repo and see how size changed between commits.&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;th&gt;Before &lt;th&gt; After
&lt;tr&gt;&lt;td&gt;&lt;em&gt;Full page generated size (kB&#39;s)&lt;/em&gt;
    &lt;td&gt; 483,524
    &lt;td&gt; 478,324
&lt;tr&gt;&lt;td&gt;&lt;em&gt;Number of image files&lt;/em&gt;
    &lt;td&gt; 375
    &lt;td&gt; 878
&lt;tr&gt;&lt;td&gt;&lt;em&gt;Assets size (kB&#39;s)&lt;/em&gt;
    &lt;td&gt; 88(css) + 184(js)
    &lt;td&gt; 188 &lt;em class=&#39;smaller&#39;&gt;(JS+CSS together, including GZ&#39;ipped copies)&lt;/em&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;GTmetrix Y Slow grade&lt;/em&gt;
    &lt;td&gt; C
    &lt;td&gt; B
&lt;/table&gt;


&lt;p&gt;Even with number of photos (main size factor on this site) increase about twice overall size went a bit down, and as for JS and CSS total size reduced by about 40%, not mentioning that instead of about dozen HTTP requests there are only 2 now.&lt;/p&gt;

&lt;h1&gt;... and problems&lt;/h1&gt;

&lt;h2&gt;Jekyll is slow&lt;/h2&gt;

&lt;p&gt;After I started playing with multiple Jekyll plugins, I&#39;ve started noticing significant slowing of the page generation. Even for small page changes it takes multiple tens of seconds to recreate file and page reload often show missing file or not regenerated CSS&#39;s.&lt;/p&gt;

&lt;p&gt;Full page build with CSS/JSS/HTML compression tames more than 2 minutes, and this is only for 48 blog posts (this one is 49&#39;s).&lt;/p&gt;

&lt;h2&gt;Liquid is quite limiting&lt;/h2&gt;

&lt;p&gt;Another problem is that Liquid templating used by Jekyll is, while easy to learn one, is quite limited and a bit hard to extend.&lt;/p&gt;

&lt;p&gt;I am finding that doing even simple (not-supported) things in Liquid is virtually impossible without writing custom plugin. Things, that in ERB would be done with 2-3 ruby commands, requires a lot of jumping through the loops.&lt;/p&gt;

&lt;h3&gt;Middleman?&lt;/h3&gt;

&lt;p&gt;Time to look for something new?&lt;/p&gt;

&lt;p&gt;Recently I&#39;ve read some intros to &lt;a href=&quot;http://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far my impressions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ERB vs Liquid is &lt;em&gt;GOOD THING&lt;/em&gt;. &lt;em&gt;I can compare this relationship to that one of Puppet vs Chef, i.e. custom configuration language plus some added on top of it Ruby DSL vs clean from the start DSL&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;things, that require a lot of plumbing in Jekyll are by default in Middleman (one example, being &lt;a href=&quot;http://middlemanapp.com/asset-pipeline/&quot;&gt;Asset Pipeline&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Oh well...&lt;/p&gt;

&lt;!--  LocalWords:  SEO GTMetrics mdash stylesheets javascripts javascript app stylesheet endraw cssnormalize min pygments fancybox jquery tagcloud html JPEG&#39;s linenos Exif jpegoptim Homebrew pngout downladable Silverman&#39;s GalleryTag plugin ERB
 --&gt;

</description>
    </item>
    
    <item>
      <title>More experience with Jekyll and setup changes</title>
      <link>http://dmytro.github.com//2013/08/13/more_about_jekyll.html</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0900</pubDate>
      <author>dmytro.kovalov@gmail.com (Dmytro Kovalov)</author>
      <guid>http://dmytro.github.com//2013/08/13/more_about_jekyll</guid>
      <description>&lt;p class=&quot;italic&quot;&gt; New features added to the Jekyll gem, at the same time trying to extend my Jekyll setup I hit Github limitations.
 Several times I&#39;ve tried to introduce plugins to Jekyll setup or some advanced feature, only to discover that Github disables some of the (quite useful) features.
. &lt;/p&gt;


&lt;h1&gt;Github&#39;s Jekyll&lt;/h1&gt;

&lt;h2&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Use of plugins is disabled by Github for security reasons. End of story. You can&#39;t use Jekyll plugins when relying on generating your site by Github.&lt;/p&gt;

&lt;h2&gt;Related posts and LSI&lt;/h2&gt;

&lt;p&gt;It was troubling me for some time, since I didn&#39;t understand how exactly &lt;code&gt;post.related_posts&lt;/code&gt; function worked in Jekyll. In the related posts I always saw just a list of latest posts.&lt;/p&gt;

&lt;p&gt;After some searching and reading, I found that Jekyll has attribute &lt;code&gt;LSI&lt;/code&gt; to control how the list of related posts is generated. When LSI is &lt;code&gt;false&lt;/code&gt; result is simple list of latest posts, which I had. Also I discovered that Github disables LSI since it produces too much load on their resources.&lt;/p&gt;

&lt;p&gt;Solution is to run jekyll locally, generate site and push it to Github. The only thing I didn&#39;t know how to make it clean and not requiring lot of maintenance.&lt;/p&gt;

&lt;p&gt;Somebody had &lt;a href=&quot;http://www.trottercashion.com/2011/04/11/use-git-plumbing-for-more-awesome-github-pages.html&quot;&gt;this solution published&lt;/a&gt;, but problem with it was that on each publishing it is pushing whole site instead of changed files only. This is taking too long with my site, since I have some photos, PDF&#39;s and what not.&lt;/p&gt;

&lt;p&gt;Creating git repository in &lt;code&gt;_site&lt;/code&gt; directory didn&#39;t work because running jekyll build was also destroying &lt;code&gt;.git&lt;/code&gt; in it.&lt;/p&gt;

&lt;p&gt;Advises on &lt;a href=&quot;http://stackoverflow.com/questions/7555837/publish-jekyll-generated-to-gh-pages-and-not-overwite-the-git-in-site&quot;&gt;keeping .git with Jekyll&lt;/a&gt; gave me some ideas about going forward.&lt;/p&gt;

&lt;h1&gt;Jekyll v. 1.x&lt;/h1&gt;

&lt;p&gt;First of all, there&#39;s a lot of changes in Jekyll. I was running v.0.12.x and many changes happened since Jekyll moved to v.1.x, one important change is added option to keep some files from overwriting.&lt;/p&gt;

&lt;p&gt;Below is step by step process for publishing site with Jekyll running locally.&lt;/p&gt;

&lt;h2&gt;Process&lt;/h2&gt;

&lt;p&gt;You&#39;d need some changes to  the configuration of Jekyll.&lt;/p&gt;

&lt;h3&gt;Files&lt;/h3&gt;

&lt;p&gt;Configuration for included or excluded files for Jekyll generation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;File lists in Jekyll changed from simple list of space separated strings to arrays of strings. So, for example exclude list now looks differently (see below).&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;keep_files&lt;/code&gt; your &lt;code&gt;_config.yml&lt;/code&gt; file. It will preserve your &lt;code&gt;_site/.git&lt;/code&gt; repository information. This is, BTW default setting.&lt;/li&gt;
&lt;li&gt;Make sure to include &lt;code&gt;lsi&lt;/code&gt; attribute, so that your local Jekyll will use it for related content generation.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;keep_files&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;.git&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Rakefile&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Guardfile&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_posts/template.md.erb&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Gemfile*&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;template.md.erb&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presentations/css/theme/template&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;lsi&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup git branches&lt;/h3&gt;

&lt;p&gt;Publications pushed to Github pages depend on the type of Github page. Here I am discussing &quot;user pages&quot;.&lt;/p&gt;

&lt;p&gt;User pages use master branch of the git repository. If master branch contains Markdown, Textile or other markup files Github&#39;s Jekyll will try to generate _site from it, but it won&#39;t try to generate anything if it&#39;s only HTML files.&lt;/p&gt;

&lt;p&gt;We&#39;d need to prepare branches accordingly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;generated content should go into &lt;code&gt;master&lt;/code&gt; branch;&lt;/li&gt;
&lt;li&gt;all sources go into different branch. I&#39;ve chosen to call it &lt;code&gt;source&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create source branch from current master&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
git checkout -b &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# And push it to source branch at Github&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
git push origin &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; -u
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now, *before* pushing to remote master, clone it into _site directory.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
git clone -b master git@github.com:dmytro/dmytro.github.com.git _site
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;h3&gt;Add publishing task&lt;/h3&gt;

&lt;p&gt;Include this code into your Rakefile. You&#39;d need to change/add some shell commands accordingly.&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:publish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Just make sure we are generating from source branch&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;git checkout source&amp;quot;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# I am using SASS for my CSS generation. You&amp;#39;d probably need to change this.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;scss sass/dmytro.sass:css/dmytro.css sass/style.sass:css/style.css&amp;quot;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll build&amp;quot;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cd _site &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Publishing at $(date)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; git push origin master&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;




&lt;!--  LocalWords:  jekyll plugins Github&#39;s LSI PDF&#39;s Gemfile endhighlight CSS
 --&gt;




&lt;!--  LocalWords:  scss cd
 --&gt;

</description>
    </item>
    

  </channel> 
</rss>

